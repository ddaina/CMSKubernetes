controller:
  containerPort: null
  affinity: {}
  autoscaling:
    enabled: false
  config: {}
  customTemplate:
    configMapKey: ""
    configMapName: ""
  daemonset:
    hostPorts:
      http: 80
      https: 443
      stats: 18080
    useHostPort: true
  defaultBackendService: ""
  dnsPolicy: ClusterFirst
  electionID: ingress-controller-leader
  extraArgs:
    enable-ssl-passthrough: ""
  extraContainers: []
  extraEnvs: []
  extraInitContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  headers: {}
#   hostNetwork: true
  hostNetwork: false
  image:
    pullPolicy: IfNotPresent
    repository: gitlab-registry.cern.ch/cloud/atomic-system-containers/nginx-ingress-controller
    runAsUser: 33
    tag: 0.26.1
  ingressClass: nginx
  kind: DaemonSet
  lifecycle: {}
  livenessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    port: 10254
    successThreshold: 1
    timeoutSeconds: 1
  metrics:
    enabled: false
    service:
      annotations: {}
      clusterIP: ""
      externalIPs: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      servicePort: 9913
      type: ClusterIP
    serviceMonitor:
      additionalLabels:
        release: prometheus-operator
      enabled: false
      namespace: kube-system
  minAvailable: 1
  minReadySeconds: 0
  name: controller
  nodeSelector:
    role: ingress
  podAnnotations: {}
  podLabels: {}
  priorityClassName: system-node-critical
  publishService:
    enabled: false
    pathOverride: ""
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    port: 10254
    successThreshold: 1
    timeoutSeconds: 1
  replicaCount: 1
  resources:
    requests:
      cpu: 200m
      memory: 256Mi
  scope:
    enabled: false
    namespace: ""
  service:
    annotations: {}
    clusterIP: ""
    enableHttp: true
    enableHttps: true
    externalIPs: []
    externalTrafficPolicy: ""
    healthCheckNodePort: 0
    labels: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts:
      http: "32080"
      https: "32443"
    targetPorts:
      http: http
      https: https
    type: NodePort
  stats:
    enabled: false
    service:
      annotations: {}
      clusterIP: ""
      externalIPs: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      servicePort: 18080
      type: ClusterIP
  tolerations: []
  updateStrategy: {}
defaultBackend:
  affinity: {}
#   enabled: true
  enabled: false
  extraArgs: {}
  image:
    pullPolicy: IfNotPresent
    repository: gitlab-registry.cern.ch/cloud/atomic-system-containers/defaultbackend
    tag: "1.4"
  minAvailable: 1
  name: default-backend
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  port: 8080
  priorityClassName: system-cluster-critical
  replicaCount: 1
  resources:
    requests:
      cpu: 10m
      memory: 20Mi
  service:
    annotations: {}
    clusterIP: ""
    externalIPs: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 80
    type: ClusterIP
  tolerations: []
imagePullSecrets: []
podSecurityPolicy:
  enabled: false
rbac:
  create: true
revisionHistoryLimit: 10
serviceAccount:
  create: true
  name: null
tcp: {}
udp:
    9331: "default/udp-server:9331"
